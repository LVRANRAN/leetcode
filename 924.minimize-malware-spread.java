import java.util.Arrays;
import java.util.HashMap;

/*
 * @lc app=leetcode id=924 lang=java
 *
 * [924] Minimize Malware Spread
 */

// @lc code=start
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        // 1. color each component
        int len = graph.length;
        int[] colors = new int[len];
        Arrays.fill(colors, -1);
        int c = 0;
        for (int i = 0; i < len; i++) {
            if (colors[i] == -1) {
                colors(graph, colors, i, c++);
            }
        }

        // 2. size of each color
        int[] size = new int[c];
        for (int color : colors) {
            size[color]++;
        }

        // 3. find unique colors
        int[] colorCount = new int[c];
        for (int node : initial) {
            colorCount[colors[node]]++;
        }

        // 4. answer
        int ans = Integer.MAX_VALUE;
        for (int node : initial) {
            int co = colors[node];
            if (colorCount[co] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = node;
                } else if (size[co] > size[colors[ans]]) {
                    ans = node;
                } else if (size[co] == size[colors[ans]] && node < ans) {
                    ans = node;
                }
            }
        }
        if (ans == Integer.MAX_VALUE) {
            for (int node : initial) {
                ans = Math.min(ans, node);
            }
        }

        return ans;
    }

    public void colors(int graph[][], int[] colors, int node, int color) {
        colors[node] = color;
        for (int i = 0; i < graph.length; i++) {
            if (graph[node][i] == 1 && colors[i] == -1) {
                colors(graph, colors, i, color);
            }
        }
    }
}
// @lc code=end
